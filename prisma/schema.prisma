generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your database provider
  url      = env("DATABASE_URL")
}

// Import enums from enums.prisma

model User {
  id              Int              @id @default(autoincrement())
  // slug            String           @unique
  email           String           @unique
  password        String
  name            String
  photo           String?
  role            String           @default("USER")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orders          Order[]
  cart            Cart?
  shippingAddress ShippingAddress?
}

// schema.prisma

model ArticleCategory {
  id                  Int               @id @default(autoincrement()) // Primary key
  slug                String            @unique
  categoryName        String            @unique // Unique name of the category
  categoryDescription String // Description of the category
  isDeleted           Boolean           @default(false) // Soft delete flag
  parentId            Int? // Optional parent category ID for hierarchical relationships
  parent              ArticleCategory?  @relation("CategoryToChildren", fields: [parentId], references: [id]) // Parent category relation
  children            ArticleCategory[] @relation("CategoryToChildren") // Child categories relation
  createdAt           DateTime          @default(now()) // Creation timestamp
  updatedAt           DateTime          @updatedAt // Update timestamp
  articles            Article[]         @relation("ArticleCategories") // Many-to-many relation with articles
}

model Article {
  id               Int               @id @default(autoincrement()) // Primary key
  slug             String            @unique
  name             String // Name of the article
  shortDescription String // Short description of the article
  longDescription  String // Long description of the article
  price            Float? // Price of the article (optional)
  inventory        Int? // Inventory count (optional)
  categoryIds      Int[] // Array of category IDs to associate with the article
  categories       ArticleCategory[] @relation("ArticleCategories") // Many-to-many relation with categories
  photos           Photo[]           @relation("ArticlePhotos") // Photos related to the article
  brandId          Int?
  brand            Brand?            @relation(fields: [brandId], references: [id])
  colors           Color[]
  tags             tags[]            @relation("ArticleTags")
  isDeleted        Boolean           @default(false) // Soft delete flag
  isPublished      Boolean           @default(true) // Published status
  createdAt        DateTime          @default(now()) // Creation timestamp
  updatedAt        DateTime          @updatedAt // Update timestamp
}

model Product {
  id               Int         @id @default(autoincrement())
  slug             String      @unique
  name             String
  shortDescription String
  longDescription  String
  price            Float?
  inventory        Int?
  Category         Category[]  @relation("ProductCategories")
  photos           Photo[]     @relation("ProductPhotos")
  colors           Color[] // Relation with Color model
  brandId          Int?
  brand            Brand?      @relation(fields: [brandId], references: [id])
  isDeleted        Boolean     @default(false)
  isPublished      Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  tags             tags[]      @relation("ProductTags") // Many-to-many relation with tags
  cartItems        CartItem[]
  orderItems       OrderItem[]
}

model Category {
  id                  Int        @id @default(autoincrement())
  slug                String     @unique
  categoryName        String     @unique
  categoryDescription String
  isDeleted           Boolean    @default(false)
  parentId            Int?
  parent              Category?  @relation("CategoryToChildren", fields: [parentId], references: [id])
  children            Category[] @relation("CategoryToChildren")
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  products            Product[]  @relation("ProductCategories")
}

model Brand {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  brandName String    @unique
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] // Relation with Product model
  aarticles Article[]
}

model Color {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  color     String    @unique
  isDeleted Boolean   @default(false) // Soft delete flag for colors
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] // One-to-many relation with Product model
  Article   Article[]
  articleId Int?
}

model Photo {
  id        Int      @id @default(autoincrement())
  // slug      String   @unique
  url       String // URL of the photo
  productId Int? // Foreign key to Product model
  product   Product? @relation("ProductPhotos", fields: [productId], references: [id], onDelete: Cascade)
  isDeleted Boolean  @default(false) // Soft delete flag for photos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articleId Int?
  Article   Article? @relation("ArticlePhotos", fields: [articleId], references: [id])
}

model tags {
  id              Int       @id @default(autoincrement())
  slug            String    @unique
  name            String    @unique
  metaTitle       String?
  metaDescription String?
  parentId        Int?
  parent          tags?     @relation("TagHierarchy", fields: [parentId], references: [id])
  children        tags[]    @relation("TagHierarchy")
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[] @relation("ProductTags") // Many-to-many relation with products
  articles        Article[] @relation("ArticleTags")
}

//...................................................................
model Payment {
  id Int @id @default(autoincrement())
  // slug String @unique

  amount    Int
  status    String
  refId     String // Assuming 'refId' should be used instead of 'transactionId'
  authority String
  createdAt DateTime @default(now())
}

model Cart {
  id Int @id @default(autoincrement())
  // slug String @unique

  userId    Int?       @unique
  user      User?      @relation(fields: [userId], references: [id])
  guestId   String? // Optional field for guest users
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([guestId]) // Ensure guestId is unique
}

model CartItem {
  id Int @id @default(autoincrement())
  // slug String @unique

  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id Int @id @default(autoincrement())
  // slug String @unique

  userId            Int?
  guestId           String? // Make this nullable for guest users
  totalPrice        Float
  status            String          @default("PENDING")
  items             OrderItem[]
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  User              User?           @relation(fields: [userId], references: [id])
}

model OrderItem {
  id Int @id @default(autoincrement())
  // slug String @unique

  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model ShippingAddress {
  id Int @id @default(autoincrement())
  // slug String @unique

  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
  guestId    String?
  fullName   String
  address    String
  city       String
  state      String
  postalCode String
  country    String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order[]

  @@unique([userId])
}

model ShippingCost {
  id Int @id @default(autoincrement())
  // slug String @unique

  weight         Float // Weight in kg (or any unit of measurement)
  destination    String // Destination, such as "USA", "Europe", etc.
  shippingMethod String // Shipping method, like "standard", "express"
  cost           Float // Shipping cost
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//...................................................................
